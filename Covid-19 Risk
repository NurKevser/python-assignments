{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "control flow statements",
      "provenance": [],
      "authorship_tag": "ABX9TyP2blNsAxrDGf6fBWPynEaJ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/NurKevser/python-assignments/blob/main/Covid-19%20Risk\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZVcsY3qEk5y5",
        "outputId": "bdc5d0df-48ec-47d1-b800-13032085b77d"
      },
      "source": [
        "if True:\n",
        "    print(\"it is true\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "it is true\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BB2xZd2nldTu"
      },
      "source": [
        "if False:\n",
        "    print(\"it is true\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m5bQtWfRldWU",
        "outputId": "c13c2a80-00e6-4cde-835b-60b7beba57d0"
      },
      "source": [
        "if 1:\n",
        "    print(\"ben\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "ben\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "i6lMDts8ldZW"
      },
      "source": [
        "if None:\n",
        "    print(\"ben\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hegEr_qRldoR",
        "outputId": "11243067-b22c-441c-8503-59e5d28a2c13"
      },
      "source": [
        "if 5:\n",
        "    print(\"ben\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "ben\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NM7kSGMfldq2"
      },
      "source": [
        "if []:\n",
        "    print(\"ben\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z8Irms60ldtd",
        "outputId": "773605b0-5f45-400c-b09d-2702c7c381d2"
      },
      "source": [
        "number = 8\n",
        "if number >=10:\n",
        "    print(\"The number is equal or greater than 10\")\n",
        "else:\n",
        "    print(\"The number is less than 10\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The number is less than 10\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u0rmUpug474L"
      },
      "source": [
        "grocery_store = {minced meat, bread, lettuce, pepper}\n",
        "if minced in grocery_store\n",
        "  "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "35cBcP9h6WLs"
      },
      "source": [
        "minced = True\n",
        "bread = True\n",
        "\n",
        "#greens\n",
        "lettuce = True\n",
        "pepper = False\n",
        "store = True"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "U-iDJ8C86s04"
      },
      "source": [
        "hamburger = (minced and store and bread) and (lettuce or pepper)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e-j7CM6G6tAH",
        "outputId": "9b839123-05eb-4ccc-db00-0b2c1b5a9092"
      },
      "source": [
        "if hamburger:\n",
        "   print(\"Bon Appetit\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Bon Appetit\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 129
        },
        "id": "70YylIo16tC3",
        "outputId": "e0051654-4ea4-4a44-9f89-ea27da3f4a62"
      },
      "source": [
        "a = input()\n",
        "if a == \"Yes\":\n",
        "  print(True)\n",
        "else a == \"No\":\n",
        "  print(False)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-4-bc3ff7e1dc7d>\"\u001b[0;36m, line \u001b[0;32m4\u001b[0m\n\u001b[0;31m    else a == \"No\":\u001b[0m\n\u001b[0m         ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2Qq3CqQe_tJC",
        "outputId": "7cd8b209-dec3-48ed-bdb4-fa047c178bd6"
      },
      "source": [
        "x = print(\"You entered :\", input(\"enter Yes or No: \").title().strip() ==\"Yes\")\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "enter Yes or No: yes\n",
            "You entered : True\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5OTJWEAuB-ik",
        "outputId": "691f2c94-3d77-428d-fa07-2aa6e4f0174d"
      },
      "source": [
        "cevap = input(\"Yes or No\") \n",
        "if cevap == \"Yes\": \n",
        "  print(\"True\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Yes or NoYes\n",
            "True\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f-N2Hd6aFUt5"
      },
      "source": [
        "a = int(input(\"Enter a number: \"))\n",
        "if a =="
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LV6MR1OxF5k6",
        "outputId": "eca54330-9aa7-4318-cdc3-d57c3cf704e4"
      },
      "source": [
        "num = int(input(\"Enter a number: \"))\n",
        "mod = num % 2\n",
        "if mod > 0:\n",
        "    print(\"number is odd\")\n",
        "else:\n",
        "    print(\"number is even\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter a number: 5\n",
            "number is odd\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jE0xf2A7GWM0",
        "outputId": "49e09b6e-49a1-45ca-91d1-637ab15010a6"
      },
      "source": [
        "number = int(input(\"Enter a number: \"))\n",
        "if number % 2 == 0 :\n",
        "    print(\"{} is even\".format(number))\n",
        "else:\n",
        "    print(\"{} is odd\".format(number))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter a number: 11\n",
            "11 is odd\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yXhhmKWMHMm1",
        "outputId": "c95b147e-79b5-4115-85f9-9980620b4a49"
      },
      "source": [
        "number = float(input(\"Enter a number: \"))\n",
        "if number > 0 :\n",
        "    print(\"positive number.\")\n",
        "else:\n",
        "    print(\"Negative number.\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter a number: -3\n",
            "Negative number.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G45ty-ssH_7A",
        "outputId": "c888d930-97f2-4a28-a5fe-34ee0af3b616"
      },
      "source": [
        "num1 = float(input())\n",
        "num2 = float(input())\n",
        "if num1 < num2:\n",
        "    print(\"The large number is: \", num2)\n",
        "else:\n",
        "  print(\"The large number is: \", num1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "5\n",
            "3\n",
            "The large number is:  5.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tddPf4LXKsuH",
        "outputId": "b6a343e9-3aa4-4886-8307-25967ebf32b0"
      },
      "source": [
        "xx = input(\"Enter Yes or No :\").title().strip()\n",
        "if xx==\"Yes\":\n",
        "    print(True)\n",
        "else:\n",
        "    print(False)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter Yes or No :fgdg\n",
            "False\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xR1dxnsRDPdw",
        "outputId": "12259224-3856-4c69-ec5d-a370b3d8459d"
      },
      "source": [
        "score = int (input(\"Enter your score :\"))\n",
        "\n",
        "if score >= 90:\n",
        "    if score >= 95:\n",
        "        Score_letter=\"A+\"\n",
        "    else:\n",
        "        Score_letter=\"A\"\n",
        "elif score >= 80:\n",
        "    if score >= 85:\n",
        "        Score_letter=\"B+\"\n",
        "    else:\n",
        "        Score_letter=\"B\"\n",
        "else:\n",
        "    Score_letter=\"below B\"\n",
        "\n",
        "print (\"Your degree: %s\" % Score_letter)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter your score :87\n",
            "Your degree: B+\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7h8GB_P0DPoo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "312703ac-6568-46be-deca-75034761870e"
      },
      "source": [
        "number = 3\n",
        "\n",
        "while number < 6:\n",
        "    print(number)\n",
        "    number += 1\n",
        "print('now, number is bigger or equal to 6')    "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "3\n",
            "4\n",
            "5\n",
            "now, number is bigger or equal to 6\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RzPzCqwJoMxi",
        "outputId": "b88c57b2-4a8f-4f9a-d1b6-3deb909fafcf"
      },
      "source": [
        "my_list=[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n",
        "\n",
        "a = 0\n",
        "\n",
        "while a < len(my_list):\n",
        "    print('square of {} is : {}'.format(a, a**2))\n",
        "    a+=1"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "square of 0 is : 0\n",
            "square of 1 is : 1\n",
            "square of 2 is : 4\n",
            "square of 3 is : 9\n",
            "square of 4 is : 16\n",
            "square of 5 is : 25\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GOyjHIpZpMgh",
        "outputId": "a846f813-405e-46da-fbaa-bd5c1dcaef41"
      },
      "source": [
        "answer = 44\n",
        "\n",
        "question = 'what number am I thinking of? '\n",
        "print(\"Let's play the guessing game!\")\n",
        "\n",
        "while True:\n",
        "    guess = int(input(question))\n",
        "\n",
        "    if guess < answer:\n",
        "      print('Little higher')\n",
        "    elif guess > answer:\n",
        "      print('Little lower')\n",
        "    else: # guess == answer\n",
        "        print(\"Are you a MINDREADER!!!\") \n",
        "        break "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Let's play the guessing game!\n",
            "what number am I thinking of? 55\n",
            "Little lower\n",
            "what number am I thinking of? 33\n",
            "Little higher\n",
            "what number am I thinking of? 45\n",
            "Little lower\n",
            "what number am I thinking of? 40\n",
            "Little higher\n",
            "what number am I thinking of? 44\n",
            "Are you a MINDREADER!!!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EBuEzcAspMlv",
        "outputId": "ce8f0dfa-5cee-4380-e7c4-a6c7d475844e"
      },
      "source": [
        "flowers = ['Rose', 'Orchid', 'Tulip']\n",
        "count1 = len(flowers)\n",
        "count2 = 0\n",
        "\n",
        "while count1>0 :\n",
        "    print(flowers[count2])\n",
        "    count1 -= 1\n",
        "    count2 += 1"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Rose\n",
            "Orchid\n",
            "Tulip\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mkSZkf0Tyfiu",
        "outputId": "befdaf7c-cea2-4be9-d279-47f20950be12"
      },
      "source": [
        "for i in {'n1' : 'one', 'n2' : 'two'} : \n",
        "    print(i) "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "n1\n",
            "n2\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1v_UbZgJyfs4",
        "outputId": "a0b5b4b7-bfab-4be2-deca-4abc23ec5bf0"
      },
      "source": [
        "times = int(input(\"How many times should I say 'I love you'\"))\n",
        "\n",
        "for i in range(times):\n",
        "    print('I love you')"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "How many times should I say 'I love you'5\n",
            "I love you\n",
            "I love you\n",
            "I love you\n",
            "I love you\n",
            "I love you\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aqeJeKcnyfvt",
        "outputId": "aae9d134-1872-4f53-8862-f5edc3f9ae49"
      },
      "source": [
        "n = int(input('enter a number between 1-10: '))\n",
        "\n",
        "for i in range(11):\n",
        "    print('{}x{} = '.format(n, i), n*i)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "enter a number between 1-10: 6\n",
            "6x0 =  0\n",
            "6x1 =  6\n",
            "6x2 =  12\n",
            "6x3 =  18\n",
            "6x4 =  24\n",
            "6x5 =  30\n",
            "6x6 =  36\n",
            "6x7 =  42\n",
            "6x8 =  48\n",
            "6x9 =  54\n",
            "6x10 =  60\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q_rCPNd_3ori",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "022b72d4-e9d7-4b23-e295-497e4efe69a1"
      },
      "source": [
        "text = ['one','two','three','four','five']\n",
        "numbers = [1, 2, 3, 4, 5]\n",
        "for x, y in zip(text, numbers):\n",
        "    print(x, ':', y)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "one : 1\n",
            "two : 2\n",
            "three : 3\n",
            "four : 4\n",
            "five : 5\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d79ofEeJ3oyj",
        "outputId": "6c4e8404-bdd7-485b-946f-c8b38e0f6fac"
      },
      "source": [
        "who = ['I am ', 'You are ']\n",
        "mood = ['happy', 'confident']\n",
        "for i in who:\n",
        "    for ii in mood :\n",
        "        print(i + ii)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "I am happy\n",
            "I am confident\n",
            "You are happy\n",
            "You are confident\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "53Lvlj7K4l_b",
        "outputId": "330ea9cb-6060-4fa2-bbd7-ec3556589917"
      },
      "source": [
        "num1 = float(input(\"Enter the first number: \"))\n",
        "num2 = float(input(\"Enter the first number: \"))\n",
        "num3 = float(input(\"Enter the first number: \"))\n",
        "if (num1 > num2) and (num1 > num3) :\n",
        "    largest = num1\n",
        "elif (num2 > num1) and (num2 > num3) :\n",
        "    largest = num2\n",
        "else:\n",
        "    largest = num3\n",
        "print(\"the largest number is:\", largest)      "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter the first number: 5\n",
            "Enter the first number: 3\n",
            "Enter the first number: 6\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_rjDGgXC4mPa",
        "outputId": "68bd2585-4884-489c-85e1-c6272fe3100f"
      },
      "source": [
        "number = float(input(\"Enter the first number: \"))\n",
        "if number > 0:\n",
        "    print(\"number is positive\")\n",
        "elif number == 0:\n",
        "    print(\"number is zero\") \n",
        "else:  \n",
        "    print(\"number is negative\")     "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter the first number: 6\n",
            "number is positive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l2QuG_S97FIY",
        "outputId": "592b0a38-0962-4fa7-97b2-46c31e3e37c7"
      },
      "source": [
        "score = int(input(\"enter your score: \"))\n",
        "if score > 90:\n",
        "    if score >= 95:\n",
        "        degree = \"A+\"\n",
        "    else:\n",
        "        degree = \"A\"\n",
        "elif score > 80:\n",
        "    if score > 85:\n",
        "        degree = \"B+\"\n",
        "    else:\n",
        "        degree = \"B\"\n",
        "else:\n",
        "    degree = \"B-\"  \n",
        "print(\"Your degree is : \", degree)                     "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "enter your score: 87\n",
            "Your degree is :  B+\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h3rVw1zoF484",
        "outputId": "f367700c-aa0d-4e26-eb58-4974ef8b88f6"
      },
      "source": [
        "\"onaltı\".isdigit()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_A3_N0dRF4_K",
        "outputId": "51cdbe79-ae41-4fb4-8197-250a194b75f0"
      },
      "source": [
        "\"16.0\".isdigit()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "False"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1tB0jBGwMG3z",
        "outputId": "00ca6af5-3332-4e80-e6c6-cbda30fb56d4"
      },
      "source": [
        "\"41\".isdigit()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sMNw3x6eMG6Z",
        "outputId": "b986ba8d-d7a5-4404-ac3c-c98f99486a34"
      },
      "source": [
        "age = input(\"Enter your age: \")\n",
        "while not age.isdigit() :\n",
        "    print(\"You entered incorrectly!\")\n",
        "    age = input(\"Enter your age correctly please: \")\n",
        "print(\"Correct!\")   "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter your age: 5\n",
            "Correct! 5\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KD42W7JbMG9W",
        "outputId": "414051ab-d5de-4319-d404-811a7f52366c"
      },
      "source": [
        "answer = 40 \n",
        "\n",
        "while True:\n",
        "    guess_number = int(input(\"What number am I thinking of? \"))\n",
        "    \n",
        "    if guess_number < answer:\n",
        "        print(\"Little higher\")\n",
        "    elif guess_number > answer:\n",
        "        print(\"Little lower\")\n",
        "    else:\n",
        "        print(\"You are MINDREADER!\")\n",
        "        break\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "What number am I thinking of? 5\n",
            "Little higher\n",
            "What number am I thinking of? 10\n",
            "Little higher\n",
            "What number am I thinking of? 50\n",
            "Little lower\n",
            "What number am I thinking of? 40\n",
            "You are MINDREADER!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BCHIACHwMG_r",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6e795491-fd4d-485d-c4b9-b63f617ab14b"
      },
      "source": [
        "first_name = input(\"Enter a username: \")\n",
        "if first_name == \"Joseph\":\n",
        "    print(\"Hello, Joseph!\")\n",
        "else: \n",
        "    print(\"hello amina see you later\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter a username: Joseph\n",
            "Hello, Joseph!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GCRuEE3KdHiJ",
        "outputId": "7b833896-a519-4972-fbe0-b5c9e6a0e614"
      },
      "source": [
        "sayı = []\n",
        "n = int(input(\"enter a number \"))\n",
        "for i in range(0,n+1):\n",
        "  sayı.append(i)\n",
        "print(sum(sayı))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "enter a number 10\n",
            "55\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2EY1gL8rsF9c",
        "outputId": "97b7dbce-089a-4825-af32-d8084796be99"
      },
      "source": [
        "age = input(\"Enter your age : \")\n",
        "while not age.isdigit() :\n",
        "    print(\"You entered incorrectly!\")\n",
        "    age = input(\"Enter your age correctly please : \")\n",
        "print(\"Great! You entered valid age :\", age)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter your age : 5\n",
            "Great! You entered valid age : 5\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1F48tL4uGM39",
        "outputId": "9691ccfb-b474-4396-b993-b15651487ac6"
      },
      "source": [
        "username = \"kevser\"\n",
        "\n",
        "while name != username:\n",
        "  name=input(\"Enter your username: \")\n",
        "  if name == username:\n",
        "    print(f\"Hello, {username}! The password is : W@12\")\n",
        "  else: \n",
        "    print(f\"Hello! try again.\")\n",
        "    "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter your username: jhjgg\n",
            "Hello! try again.\n",
            "Enter your username: kjhg\n",
            "Hello! try again.\n",
            "Enter your username: kjhkg\n",
            "Hello! try again.\n",
            "Enter your username: kevser\n",
            "Hello, kevser! The password is : W@12\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z76mVrHiLS4P",
        "outputId": "c387460a-a1fe-4bba-e6f5-50c6ea4e595f"
      },
      "source": [
        "x = int(input(\"How many numbers will you enter: \"))\n",
        "y = 0\n",
        "numbers = []\n",
        "while y != x:\n",
        "  numbers.append(int(input(\"Please enter a number: \")))\n",
        "  y += 1\n",
        "print(\"The largest number is \", sorted(numbers)[-1])\n",
        "   "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "How many numbers will you enter: 3\n",
            "Please enter a number: 12\n",
            "Please enter a number: 55\n",
            "Please enter a number: 90\n",
            "The largest number is  90\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z28rTMnZCkR0"
      },
      "source": [
        "strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\", \"cat\", \"tac\"]\n",
        "sorted_strs = []\n",
        "anagram = []\n",
        "for word in strs\n",
        "  if sorted(word) not in sorted_strs\n",
        "   sorted_strs.append(sorted(word))\n",
        "for \n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-5yBByfRsasG",
        "outputId": "548c1961-3d8f-41d8-ea69-3ea901a896ef"
      },
      "source": [
        "strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\", \"cat\", \"tac\"]\n",
        "anag = {}\n",
        "for i in strs:\n",
        "    element = \"\".join(sorted(i))\n",
        "    if element in anag:\n",
        "        anag[element].append(i)\n",
        "        print(anag)\n",
        "    else:\n",
        "        anag[element] = [i]\n",
        "print(list(anag.values()))\n",
        "    \n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'aet': ['eat', 'tea']}\n",
            "{'aet': ['eat', 'tea', 'ate'], 'ant': ['tan']}\n",
            "{'aet': ['eat', 'tea', 'ate'], 'ant': ['tan', 'nat']}\n",
            "{'aet': ['eat', 'tea', 'ate'], 'ant': ['tan', 'nat'], 'abt': ['bat'], 'act': ['cat', 'tac']}\n",
            "[['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat'], ['cat', 'tac']]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hWzs3Uc20jiC",
        "outputId": "77eaa576-e21d-4129-8fbc-90508c339150"
      },
      "source": [
        "a = 49\n",
        "while a % 2 != 0:\n",
        "  print(a)\n",
        "  a += 5"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "49\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VWQRuQ0B0736",
        "outputId": "1309bc7e-d9b8-41ae-8020-95dd5655ccfa"
      },
      "source": [
        "a = 49\n",
        "while a <= 62:\n",
        "  print(a)\n",
        "  a += 5"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "49\n",
            "54\n",
            "59\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M7BSuvLYAbIC",
        "outputId": "81179dae-3518-45b7-f74d-5cfefeda8fab"
      },
      "source": [
        "numbers = []\n",
        "for i in range(1500,2701):\n",
        "  if i%7 == 0 and i&5 == 0:\n",
        "    numbers.append(i)\n",
        "print(numbers)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1512, 1554, 1568, 1610, 1624, 1666, 1680, 1722, 1736, 1778, 1792, 1834, 1848, 1890, 1904, 1946, 1960, 2002, 2016, 2058, 2072, 2114, 2128, 2170, 2184, 2226, 2240, 2282, 2296, 2338, 2352, 2394, 2408, 2450, 2464, 2506, 2520, 2562, 2576, 2618, 2632, 2674, 2688]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xmAwIwUwDFRR"
      },
      "source": [
        "def calculate_exponent(num, exp):\n",
        "\treturn num**exp"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U7rd4WmWDH_T",
        "outputId": "dd6894dc-8557-4e70-e6a4-21b357f126c6"
      },
      "source": [
        "calculate_exponent(5,2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "25"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PzWEiIBrgfBx",
        "outputId": "848d37d5-6436-46ba-9638-b06147c98d00"
      },
      "source": [
        "sentence = input(\"Enter a sentence: \")\n",
        "words = sentence.split()\n",
        "i = 0\n",
        "longest = 0\n",
        "while i < len(words):\n",
        "  if len(words[i]) > longest:\n",
        "    longest = len(words[i])\n",
        "  i += 1\n",
        "print(\"The longest lenght word is \",longest)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter a sentence: seni çok seviyorum\n",
            "The longest lenght word is  9\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SAuGUxTkjBll",
        "outputId": "62582c75-a5e9-4d89-8db2-930b6f795602"
      },
      "source": [
        "names = [\"Ahmed\", \"Aisha\", \"Adam\", \"Joseph\", \"Gabriel\"]\n",
        "for i in names:\n",
        "  print(\"hello \", i)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "hello  Ahmed\n",
            "hello  Aisha\n",
            "hello  Adam\n",
            "hello  Joseph\n",
            "hello  Gabriel\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WoSgjFFwjt9-",
        "outputId": "f2f887be-f818-4fcb-c0c3-80b7f602fc3e"
      },
      "source": [
        "x = []\n",
        "for i in range(1,6):\n",
        "  x.append(i)\n",
        "print(x)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1, 2, 3, 4, 5]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K0qSRWixktRc",
        "outputId": "8a801972-c710-4ec4-ff96-fb56b56fa53d"
      },
      "source": [
        "word = input(\"enter a word: \")\n",
        "x = []\n",
        "for i in word:\n",
        "  x.append(i)\n",
        "print(\"-\".join(x))  "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "enter a word: kevser\n",
            "k-e-v-s-e-r\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IoNueZitnn6X",
        "outputId": "db6e5024-6675-4cdb-a779-fa5ac5ffd838"
      },
      "source": [
        "word = input(\"enter a word: \")\n",
        "count = 0\n",
        "for i in word :\n",
        "  count += 1\n",
        "  if count < len(word):\n",
        "    i = i + \"-\"\n",
        "  print(i, end = \"\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "enter a word: kevser\n",
            "k-e-v-s-e-r"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R8ktyShDnoGB",
        "outputId": "7a293c9e-6d9e-4042-f75c-55ec57274306"
      },
      "source": [
        "samanlık = [\"yumurta\", \"yaba\", \"inek\", \"iğne\", \"saman\", \"tezek\", \"tırmık\"]\n",
        "print(f\"iğne {samanlık.index('iğne')} numaralı indexte.\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "iğne 3 numaralı indexte.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JWIbSw7JnoJd",
        "outputId": "47bbeaac-2620-4ad5-dc61-320bd64c4d33"
      },
      "source": [
        "(monday, tuesday, wednesday, thursday, friday, saturday, sunday) = list(range(1,8))\n",
        "friday"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OelSvZRk6O7T",
        "outputId": "a0bbd483-9f11-4fdb-e1d8-3b9e844c9b0c"
      },
      "source": [
        "print([1, 2, 3, 4] + [\"11\",\"22\", 33])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1, 2, 3, 4, '11', '22', 33]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xdeSuBPT7IXi"
      },
      "source": [
        "tt = (1, 2, [1,3,5])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dTU_MqK17IbX",
        "outputId": "06b59d28-ef0e-45be-aac6-34d8dfbff871"
      },
      "source": [
        "tt[2].append(4)\n",
        "tt"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1, 2, [1, 3, 5, 4])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c4pydonu7Ie1",
        "outputId": "edf968c7-c8c2-4f18-bac6-9d37c7df07ed"
      },
      "source": [
        "x = int(input(\"enter a number between 1-10: \"))\n",
        "for i in range(11):\n",
        "   print(f\"{x}x{i} = {x*i}\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "enter a number: 5\n",
            "5x0 = 0\n",
            "5x1 = 5\n",
            "5x2 = 10\n",
            "5x3 = 15\n",
            "5x4 = 20\n",
            "5x5 = 25\n",
            "5x6 = 30\n",
            "5x7 = 35\n",
            "5x8 = 40\n",
            "5x9 = 45\n",
            "5x10 = 50\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iQcIuWF37Ilm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "239b851a-7973-404c-b0ce-c290c69ddcd8"
      },
      "source": [
        "liste=[\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\", \"adobe\", \"abode\"]\n",
        "sorted_list=[]\n",
        "sonuc=[]\n",
        "for i in liste:\n",
        "  if sorted(i) not in sorted_list:\n",
        "    sorted_list.append(sorted(i))\n",
        "for a in range(len(sorted_list)):\n",
        "  sonuc.append([i for i in liste if sorted(i)==sorted_list[a]])\n",
        "print(sonuc)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat'], ['adobe', 'abode']]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TTXqo6PNq9jE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9825bdd1-4ed2-4755-e1c2-d4c5fc425371"
      },
      "source": [
        "# initialzing a list of strings\n",
        "anagrams = [\"cat,\" \"dog\", \"fired\", \"god\", \"pat\", \"tap\", \"fried\", \"tac\"]\n",
        "# initializing an empty dict\n",
        "grouped_anagrams = {}\n",
        "# iterating over the list to group all anagrams\n",
        "for string in anagrams:\n",
        "   # sorting the string\n",
        "   sorted_string = str(sorted(string))\n",
        "   # checking the string in dict\n",
        "   if sorted_string in grouped_anagrams:\n",
        "      # adding the string to the group anagrams\n",
        "      grouped_anagrams[sorted_string].append(string)\n",
        "   else:\n",
        "         # initializing a list with current string\n",
        "         grouped_anagrams[sorted_string] = [string]\n",
        "# printing the values of the dict (anagram groups)\n",
        "print(list(grouped_anagrams.values()))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[['cat,dog'], ['fired', 'fried'], ['god'], ['pat', 'tap'], ['tac']]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QKVMymdmZX2k",
        "outputId": "c7a5047f-7cc4-46e5-d006-c6c0e324cef8"
      },
      "source": [
        "for number in range(10):\n",
        "  print(number*str(number))\n",
        "for i in range(8,0,-1):\n",
        "  print(i*str(i))\n",
        "  "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "1\n",
            "22\n",
            "333\n",
            "4444\n",
            "55555\n",
            "666666\n",
            "7777777\n",
            "88888888\n",
            "999999999\n",
            "88888888\n",
            "7777777\n",
            "666666\n",
            "55555\n",
            "4444\n",
            "333\n",
            "22\n",
            "1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WGJFrVjV6wqi"
      },
      "source": [
        "text = ['one', 'two', 'three', 'four', 'five']\n",
        "numbers = [1, 2, 3, 4, 5]\n",
        "city = []"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "untGQrkC7iV9",
        "outputId": "b792f6d0-c962-4b04-d8f5-5a4712f4bbd9"
      },
      "source": [
        "even = []\n",
        "odd = []\n",
        "liste = []\n",
        "for i in range(0,11):\n",
        "  if i%2 == 0:\n",
        "    even.append(i)\n",
        "  else:\n",
        "    odd.append(i)  \n",
        "print(even)\n",
        "print(odd)\n",
        "liste.append(odd)\n",
        "liste.append(even)\n",
        "print(liste)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0, 2, 4, 6, 8, 10]\n",
            "[1, 3, 5, 7, 9]\n",
            "[[1, 3, 5, 7, 9], [0, 2, 4, 6, 8, 10]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "crm3XoFS-tld",
        "outputId": "bdcf7d02-89cf-4fe3-c455-81ed3e89dec2"
      },
      "source": [
        "exp_list = [11, 2, 24, 61, 48, 33, 3]\n",
        "even = 0\n",
        "odd = 0\n",
        "for i in exp_list:\n",
        "  if i%2 == 0:\n",
        "    even += 1\n",
        "  else:\n",
        "    odd += 1  \n",
        "print(\"The number of even numbers :\",even)\n",
        "print(\"The number of odd numbers :\",odd)  "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "The number of even numbers : 3\n",
            "The number of odd numbers : 4\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FBRUmjR-BCC5",
        "outputId": "f18e69e1-c568-48d9-b7e8-1854278b4153"
      },
      "source": [
        "for number in range(1,10):\n",
        "  print(number*str(number))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1\n",
            "22\n",
            "333\n",
            "4444\n",
            "55555\n",
            "666666\n",
            "7777777\n",
            "88888888\n",
            "999999999\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hIN0HGDAEz2L",
        "outputId": "b71495ec-69fb-44f3-f258-e0ab1f839671"
      },
      "source": [
        "toplam = []\n",
        "for i in range(1,75):\n",
        "  toplam.append(i)\n",
        "print(sum(toplam))\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2775\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C0us7Y3CJJ6A",
        "outputId": "ee6bf10b-a39f-4a64-80a3-880e2269124a"
      },
      "source": [
        "toplam = 0\n",
        "for i in range(1,75):\n",
        "  toplam += i\n",
        "print(toplam)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2775\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KcvXUmFaLEy3",
        "outputId": "f39dce71-7eb6-49eb-dadb-066f7e026dfb"
      },
      "source": [
        "names = [\"susan\", \"tom\", \"edward\"] \n",
        "mood = [\"happy\", \"sad\"]\n",
        "for i in names:\n",
        "  for ii in mood:\n",
        "    print(i, \"is\" ,ii)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "susan is happy\n",
            "susan is sad\n",
            "tom is happy\n",
            "tom is sad\n",
            "edward is happy\n",
            "edward is sad\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pcAjce0YMB0N",
        "outputId": "0b7c6fcf-0a97-4baf-a061-e5d94a0deea2"
      },
      "source": [
        "liste = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "print([x ** 2 for x in liste if x % 2 != 0])\n",
        "print([x for x in liste if x % 2 == 0])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[1, 9, 25, 49, 81]\n",
            "[2, 4, 6, 8]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9BQu6AnQd3ZH",
        "outputId": "19a29d67-1e7e-40fc-9fec-e882c38dc223"
      },
      "source": [
        "thickness = int(input()) #This must be an odd number\n",
        "c = 'H'\n",
        "\n",
        "#Top Cone\n",
        "for i in range(thickness):\n",
        "    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "10\n",
            "         H         \n",
            "        HHH        \n",
            "       HHHHH       \n",
            "      HHHHHHH      \n",
            "     HHHHHHHHH     \n",
            "    HHHHHHHHHHH    \n",
            "   HHHHHHHHHHHHH   \n",
            "  HHHHHHHHHHHHHHH  \n",
            " HHHHHHHHHHHHHHHHH \n",
            "HHHHHHHHHHHHHHHHHHH\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lWMmINHxcxe9",
        "outputId": "26a83295-f02a-47fe-d94a-16cb7c804c81"
      },
      "source": [
        "thickness = int(input(\"enter a odd number between 0-50: \"))\n",
        "for i in range(thickness):\n",
        "  print('H'*thickness + ''*11 + ('H'*thickness).rjust(thickness*5))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "enter a odd number between 0-50: 5\n",
            "HHHHH                    HHHHH\n",
            "HHHHH                    HHHHH\n",
            "HHHHH                    HHHHH\n",
            "HHHHH                    HHHHH\n",
            "HHHHH                    HHHHH\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QPqsZKe_LmM3",
        "outputId": "c354842b-1cbf-456e-8a08-3c07810728fe"
      },
      "source": [
        "for i in range (10):\n",
        "  if i % 2:\n",
        "    print((f\"{i-1}\" * i).center(len(range(10))), end=\"             \")\n",
        "    print((f\"{i}\" * i).center(len(range(10))))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "    0                      1     \n",
            "   222                    333    \n",
            "  44444                  55555   \n",
            " 6666666                7777777  \n",
            "888888888              999999999 \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iJImeC9LXIk5",
        "outputId": "d9aab49b-8318-4d54-9f96-e71ff972b60c"
      },
      "source": [
        "line = 10\n",
        "print()\n",
        "for i in range(line):\n",
        "   print(' '*16+' '*19+'*'*12+' '*7+'*'*12+' '*7+'*'*(line-1-i)+'*'*(3*i+1))\n",
        "for i in range(line*2-7):\n",
        "    print(' '*(line+5-i)+'*'*(i+1)+'*'*12+' '*7+'*'*12+' '*7+'*'*12+' '*7+'*'*12)\n",
        "for i in range(5):\n",
        "    print(' '*16+'*'*19+'*'*19+'*'*12+' '*7+'*'*12)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "                                   ************       ************       **********\n",
            "                                   ************       ************       ************\n",
            "                                   ************       ************       **************\n",
            "                                   ************       ************       ****************\n",
            "                                   ************       ************       ******************\n",
            "                                   ************       ************       ********************\n",
            "                                   ************       ************       **********************\n",
            "                                   ************       ************       ************************\n",
            "                                   ************       ************       **************************\n",
            "                                   ************       ************       ****************************\n",
            "               *************       ************       ************       ************\n",
            "              **************       ************       ************       ************\n",
            "             ***************       ************       ************       ************\n",
            "            ****************       ************       ************       ************\n",
            "           *****************       ************       ************       ************\n",
            "          ******************       ************       ************       ************\n",
            "         *******************       ************       ************       ************\n",
            "        ********************       ************       ************       ************\n",
            "       *********************       ************       ************       ************\n",
            "      **********************       ************       ************       ************\n",
            "     ***********************       ************       ************       ************\n",
            "    ************************       ************       ************       ************\n",
            "   *************************       ************       ************       ************\n",
            "                **************************************************       ************\n",
            "                **************************************************       ************\n",
            "                **************************************************       ************\n",
            "                **************************************************       ************\n",
            "                **************************************************       ************\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UCatuUSQ0lzn",
        "outputId": "5ec63726-cee8-405e-a419-7c87807347ca"
      },
      "source": [
        "number = int(input(\"please enter a positive integer number: \"))\n",
        "while True:\n",
        "  if number <= 0:\n",
        "    number = int(input(\"please enter a positive integer number: \"))\n",
        "  if number > 0:\n",
        "    break\n",
        "print(number)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "please enter a positive integer number: -9\n",
            "please enter a positive integer number: -6\n",
            "please enter a positive integer number: 0\n",
            "please enter a positive integer number: 8\n",
            "8\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cqAjn4ha2v2m",
        "outputId": "a829deeb-b9d9-4211-8e7b-d61243612eb5"
      },
      "source": [
        "for i in range(1,11):\n",
        "  for j in range(1,11):\n",
        "    print((f\"{i}*{j} = {i*j}\"), \"\\t\", end=\"\\t\") \n",
        "  print(\"\")  \n",
        "\n",
        "\n",
        " "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1*1 = 1 \t\t1*2 = 2 \t\t1*3 = 3 \t\t1*4 = 4 \t\t1*5 = 5 \t\t1*6 = 6 \t\t1*7 = 7 \t\t1*8 = 8 \t\t1*9 = 9 \t\t1*10 = 10 \t\t\n",
            "2*1 = 2 \t\t2*2 = 4 \t\t2*3 = 6 \t\t2*4 = 8 \t\t2*5 = 10 \t\t2*6 = 12 \t\t2*7 = 14 \t\t2*8 = 16 \t\t2*9 = 18 \t\t2*10 = 20 \t\t\n",
            "3*1 = 3 \t\t3*2 = 6 \t\t3*3 = 9 \t\t3*4 = 12 \t\t3*5 = 15 \t\t3*6 = 18 \t\t3*7 = 21 \t\t3*8 = 24 \t\t3*9 = 27 \t\t3*10 = 30 \t\t\n",
            "4*1 = 4 \t\t4*2 = 8 \t\t4*3 = 12 \t\t4*4 = 16 \t\t4*5 = 20 \t\t4*6 = 24 \t\t4*7 = 28 \t\t4*8 = 32 \t\t4*9 = 36 \t\t4*10 = 40 \t\t\n",
            "5*1 = 5 \t\t5*2 = 10 \t\t5*3 = 15 \t\t5*4 = 20 \t\t5*5 = 25 \t\t5*6 = 30 \t\t5*7 = 35 \t\t5*8 = 40 \t\t5*9 = 45 \t\t5*10 = 50 \t\t\n",
            "6*1 = 6 \t\t6*2 = 12 \t\t6*3 = 18 \t\t6*4 = 24 \t\t6*5 = 30 \t\t6*6 = 36 \t\t6*7 = 42 \t\t6*8 = 48 \t\t6*9 = 54 \t\t6*10 = 60 \t\t\n",
            "7*1 = 7 \t\t7*2 = 14 \t\t7*3 = 21 \t\t7*4 = 28 \t\t7*5 = 35 \t\t7*6 = 42 \t\t7*7 = 49 \t\t7*8 = 56 \t\t7*9 = 63 \t\t7*10 = 70 \t\t\n",
            "8*1 = 8 \t\t8*2 = 16 \t\t8*3 = 24 \t\t8*4 = 32 \t\t8*5 = 40 \t\t8*6 = 48 \t\t8*7 = 56 \t\t8*8 = 64 \t\t8*9 = 72 \t\t8*10 = 80 \t\t\n",
            "9*1 = 9 \t\t9*2 = 18 \t\t9*3 = 27 \t\t9*4 = 36 \t\t9*5 = 45 \t\t9*6 = 54 \t\t9*7 = 63 \t\t9*8 = 72 \t\t9*9 = 81 \t\t9*10 = 90 \t\t\n",
            "10*1 = 10 \t\t10*2 = 20 \t\t10*3 = 30 \t\t10*4 = 40 \t\t10*5 = 50 \t\t10*6 = 60 \t\t10*7 = 70 \t\t10*8 = 80 \t\t10*9 = 90 \t\t10*10 = 100 \t\t\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x1gZ_QhevKE4",
        "outputId": "4b1d4fb6-9ac6-4df2-be33-7004ec2b287b"
      },
      "source": [
        "age = input(\"Are you a cigarette addict older than 75 yaers old?(Yes/No) \").title().strip() == \"Yes\"\n",
        "chronic = input(\"Do you have a severe chronic disease?(Yes/No) \").title().strip() == \"Yes\"\n",
        "immune = input(\"Is your immune system too weak?(Yes/No) \").title().strip() == \"Yes\"\n",
        "if age or chronic or immune == True:\n",
        "  print(\"You are in risky group\")\n",
        "else:\n",
        "  print(\"You are not in risky group\") \n",
        "\n"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Are you a cigarette addict older than 75 yaers old?(Yes/No) no \n",
            "Do you have a severe chronic disease?(Yes/No) no\n",
            "Is your immune system too weak?(Yes/No) no\n",
            "You are not in risky group?\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}